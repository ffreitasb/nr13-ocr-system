#!/usr/bin/env python3\n\"\"\"\nScript de Setup Autom√°tico - Sistema OCR NR-13\nCria estrutura de diret√≥rios e verifica depend√™ncias\n\"\"\"\nimport os\nimport sys\nimport subprocess\nfrom pathlib import Path\n\n\ndef print_step(step, message):\n    \"\"\"Imprime etapa do setup\"\"\"\n    print(f\"\\n[{step}] {message}\")\n    print(\"-\" * 50)\n\n\ndef check_python_version():\n    \"\"\"Verifica vers√£o do Python\"\"\"\n    version = sys.version_info\n    if version.major < 3 or (version.major == 3 and version.minor < 8):\n        print(\"‚ùå Python 3.8+ √© obrigat√≥rio\")\n        print(f\"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}\")\n        return False\n    \n    print(f\"‚úÖ Python {version.major}.{version.minor}.{version.micro} OK\")\n    return True\n\n\ndef create_init_files():\n    \"\"\"Cria arquivos __init__.py necess√°rios\"\"\"\n    init_files = [\n        'config/__init__.py',\n        'ocr/__init__.py'\n    ]\n    \n    for init_file in init_files:\n        init_path = Path(init_file)\n        if not init_path.exists():\n            init_path.parent.mkdir(parents=True, exist_ok=True)\n            init_path.write_text('\"\"\"\\nM√≥dulo do sistema NR13 OCR\\n\"\"\"\\n')\n            print(f\"‚úÖ Criado: {init_file}\")\n        else:\n            print(f\"‚úÖ Existe: {init_file}\")\n\n\ndef create_directories():\n    \"\"\"Cria diret√≥rios necess√°rios\"\"\"\n    directories = [\n        'input',\n        'output/json',\n        'output/batch', \n        'output/reports',\n        'logs',\n        'data'\n    ]\n    \n    for directory in directories:\n        dir_path = Path(directory)\n        dir_path.mkdir(parents=True, exist_ok=True)\n        \n        # Cria .gitkeep se n√£o existe\n        gitkeep = dir_path / '.gitkeep'\n        if not gitkeep.exists():\n            gitkeep.write_text('')\n            \n        print(f\"‚úÖ Diret√≥rio: {directory}\")\n\n\ndef check_required_files():\n    \"\"\"Verifica arquivos obrigat√≥rios\"\"\"\n    required_files = [\n        'config/settings.py',\n        'config/field_mappings.yaml',\n        'ocr/processor.py',\n        'ocr/models.py',\n        'ocr/normalizer.py',\n        'services.py',\n        'utils.py',\n        'requirements.txt',\n        '.env.example'\n    ]\n    \n    missing = []\n    for file_path in required_files:\n        if not Path(file_path).exists():\n            missing.append(file_path)\n        else:\n            print(f\"‚úÖ Arquivo: {file_path}\")\n    \n    if missing:\n        print(\"\\n‚ùå Arquivos obrigat√≥rios faltando:\")\n        for file_path in missing:\n            print(f\"   ‚Ä¢ {file_path}\")\n        print(\"\\nüîß Baixe o projeto completo do GitHub:\")\n        print(\"   git clone https://github.com/ffreitasb/nr13-ocr-system.git\")\n        return False\n    \n    return True\n\n\ndef setup_env_file():\n    \"\"\"Configura arquivo .env\"\"\"\n    env_file = Path('.env')\n    env_example = Path('.env.example')\n    \n    if not env_file.exists() and env_example.exists():\n        # Copia .env.example para .env\n        env_file.write_text(env_example.read_text())\n        print(\"‚úÖ Arquivo .env criado\")\n        print(\"‚ö†Ô∏è  IMPORTANTE: Configure sua MISTRAL_API_KEY no arquivo .env\")\n        return False  # Precisa configurar API key\n    elif env_file.exists():\n        print(\"‚úÖ Arquivo .env existe\")\n        \n        # Verifica se API key est√° configurada\n        content = env_file.read_text()\n        if 'your_api_key_here' in content or 'MISTRAL_API_KEY=' not in content:\n            print(\"‚ö†Ô∏è  IMPORTANTE: Configure sua MISTRAL_API_KEY no arquivo .env\")\n            return False\n        else:\n            print(\"‚úÖ API Key configurada\")\n            return True\n    else:\n        print(\"‚ùå Arquivo .env.example n√£o encontrado\")\n        return False\n\n\ndef install_dependencies():\n    \"\"\"Instala depend√™ncias\"\"\"\n    try:\n        print(\"üì¶ Instalando depend√™ncias...\")\n        result = subprocess.run(\n            [sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        print(\"‚úÖ Depend√™ncias instaladas\")\n        return True\n    except subprocess.CalledProcessError as e:\n        print(f\"‚ùå Erro ao instalar depend√™ncias: {e}\")\n        print(f\"   Sa√≠da: {e.stdout}\")\n        print(f\"   Erro: {e.stderr}\")\n        return False\n    except FileNotFoundError:\n        print(\"‚ùå pip n√£o encontrado\")\n        return False\n\n\ndef test_imports():\n    \"\"\"Testa imports do sistema\"\"\"\n    try:\n        # Adiciona diret√≥rio atual ao path\n        sys.path.insert(0, str(Path.cwd()))\n        \n        print(\"üß™ Testando imports...\")\n        \n        from config.settings import settings\n        print(\"   ‚úÖ config.settings\")\n        \n        from ocr.processor import OCRProcessor\n        print(\"   ‚úÖ ocr.processor\")\n        \n        from services import BatchManager\n        print(\"   ‚úÖ services\")\n        \n        from utils import get_logger\n        print(\"   ‚úÖ utils\")\n        \n        print(\"‚úÖ Todos os imports funcionaram!\")\n        return True\n        \n    except ImportError as e:\n        print(f\"‚ùå Erro de import: {e}\")\n        return False\n\n\ndef test_basic_functionality():\n    \"\"\"Testa funcionalidade b√°sica\"\"\"\n    try:\n        print(\"üß™ Testando funcionalidade b√°sica...\")\n        \n        # Adiciona ao path\n        sys.path.insert(0, str(Path.cwd()))\n        \n        from config.settings import settings\n        settings.validate()\n        print(\"   ‚úÖ Configura√ß√µes v√°lidas\")\n        \n        from ocr.processor import OCRProcessor\n        processor = OCRProcessor()\n        print(\"   ‚úÖ Processador inicializado\")\n        \n        print(\"‚úÖ Funcionalidade b√°sica OK\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Erro na funcionalidade: {e}\")\n        return False\n\n\ndef main():\n    \"\"\"Fun√ß√£o principal do setup\"\"\"\n    print(\"üöÄ SETUP AUTOM√ÅTICO - SISTEMA OCR NR-13\")\n    print(\"=\" * 60)\n    \n    # Verifica se est√° no diret√≥rio correto\n    if not Path('main.py').exists():\n        print(\"‚ùå Execute este script da pasta raiz do projeto (onde est√° o main.py)\")\n        return False\n    \n    success = True\n    \n    # 1. Verifica Python\n    print_step(1, \"Verificando Python\")\n    if not check_python_version():\n        success = False\n    \n    # 2. Cria arquivos __init__.py\n    print_step(2, \"Criando arquivos __init__.py\")\n    create_init_files()\n    \n    # 3. Cria diret√≥rios\n    print_step(3, \"Criando diret√≥rios\")\n    create_directories()\n    \n    # 4. Verifica arquivos obrigat√≥rios\n    print_step(4, \"Verificando arquivos obrigat√≥rios\")\n    if not check_required_files():\n        success = False\n    \n    # 5. Configura .env\n    print_step(5, \"Configurando arquivo .env\")\n    env_configured = setup_env_file()\n    \n    # 6. Instala depend√™ncias\n    print_step(6, \"Instalando depend√™ncias\")\n    if not install_dependencies():\n        success = False\n    \n    # 7. Testa imports\n    print_step(7, \"Testando imports\")\n    if not test_imports():\n        success = False\n    \n    # 8. Testa funcionalidade (s√≥ se API key configurada)\n    if env_configured:\n        print_step(8, \"Testando funcionalidade\")\n        if not test_basic_functionality():\n            success = False\n    \n    # Resultado final\n    print(\"\\n\" + \"=\" * 60)\n    if success and env_configured:\n        print(\"üéâ SETUP CONCLU√çDO COM SUCESSO!\")\n        print(\"\\nüöÄ Pr√≥ximos passos:\")\n        print(\"   1. Execute: python main.py\")\n        print(\"   2. Coloque imagens na pasta 'input/'\")\n        print(\"   3. Escolha op√ß√£o 1 para processar\")\n    elif success and not env_configured:\n        print(\"‚ö†Ô∏è  SETUP QUASE CONCLU√çDO\")\n        print(\"\\nüîß A√ß√£o necess√°ria:\")\n        print(\"   1. Configure sua MISTRAL_API_KEY no arquivo .env\")\n        print(\"   2. Execute novamente: python setup.py\")\n        print(\"   3. Ou execute diretamente: python main.py\")\n    else:\n        print(\"‚ùå SETUP INCOMPLETO\")\n        print(\"\\nüîß Corrija os erros acima e execute novamente\")\n        print(\"\\nüìö Documenta√ß√£o:\")\n        print(\"   ‚Ä¢ docs/INSTALLATION.md\")\n        print(\"   ‚Ä¢ docs/TROUBLESHOOTING.md\")\n    \n    print(\"=\" * 60)\n    return success\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\n\\nüëã Setup interrompido pelo usu√°rio\")\n    except Exception as e:\n        print(f\"\\n\\n‚ùå Erro inesperado no setup: {e}\")\n        print(\"\\nüîß Tente executar manualmente ou consulte a documenta√ß√£o\")\n