#!/usr/bin/env python3
"""
Sistema OCR para Placas NR-13
Entry point principal
"""
import sys
import json
from pathlib import Path

# Adiciona diret√≥rio ao path para imports
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from ocr.processor import OCRProcessor
from ocr.models import PlacaNR13
from services import BatchManager
from utils import (
    get_logger, print_banner, print_summary, ask_confirmation,
    validate_nr13_result, format_time, get_system_info
)

logger = get_logger(__name__)


def print_menu():
    """Imprime menu principal"""
    print(f"\nüìä Modo H√≠brido Inteligente:")
    print(f"   ‚Ä¢ 1-{settings.BATCH_THRESHOLD}: Processamento S√≠ncrono")
    print(f"   ‚Ä¢ >{settings.BATCH_THRESHOLD}: Batch API (50% desconto)")
    print("\n" + "-"*60)
    print("\n1. Processar imagens (autom√°tico)")
    print("2. Processar imagem espec√≠fica")
    print("3. Validar JSONs processados")
    print("4. Ver hist√≥rico de jobs batch")
    print("5. Ver relat√≥rios")
    print("6. Configura√ß√µes")
    print("7. Teste de conex√£o")
    print("8. Estat√≠sticas")
    print("9. Sair")
    print("-"*60)


def process_images(processor: OCRProcessor):
    """Processa imagens no diret√≥rio de entrada"""
    print("\nüîÑ Processando imagens...")

    # Verifica se h√° imagens
    images = processor.files.list_images(settings.INPUT_DIR)
    if not images:
        print(f"\n‚ö†Ô∏è Nenhuma imagem encontrada em {settings.INPUT_DIR}")
        print(f"Coloque as imagens das placas na pasta '{settings.INPUT_DIR}' e tente novamente.")
        print(f"Formatos suportados: {', '.join(settings.SUPPORTED_FORMATS)}")
        return

    summary = processor.process()

    if 'error' in summary:
        print(f"\n‚ùå {summary.get('message', 'Erro no processamento')}")
    else:
        print_summary(summary)

        if summary.get('sucesso', 0) > 0:
            print(f"\n‚úÖ Resultados salvos em: {settings.OUTPUT_JSON}")
            
            # Mostra alguns resultados
            show_recent_results()


def show_recent_results(limit: int = 3):
    """Mostra resultados recentes"""
    json_files = sorted(settings.OUTPUT_JSON.glob("*_ocr.json"), 
                       key=lambda x: x.stat().st_mtime, reverse=True)
    
    if json_files:
        print(f"\nüìã √öltimos {min(limit, len(json_files))} resultados:")
        print("-" * 40)
        
        for json_file in json_files[:limit]:
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                print(f"\nüìÑ {json_file.name}:")
                
                # Mostra campos principais
                main_fields = ['identificacao', 'fabricante', 'categoria', 'pressao_maxima_trabalho']
                for field in main_fields:
                    if field in data and data[field]:
                        print(f"  ‚Ä¢ {field}: {data[field]}")
                
                # Mostra valida√ß√£o se dispon√≠vel
                if '_metadata' in data and 'validacao' in data['_metadata']:
                    val = data['_metadata']['validacao']
                    status = "‚úÖ" if val.get('valid') else "‚ö†Ô∏è"
                    print(f"  {status} Completude: {val.get('completeness', 0):.1f}%")
                    
            except Exception as e:
                print(f"  ‚ùå Erro ao ler {json_file.name}: {e}")


def process_single_image(processor: OCRProcessor):
    """Processa uma imagem espec√≠fica"""
    path = input("\nCaminho da imagem: ").strip()

    if not path:
        print("‚ùå Caminho inv√°lido")
        return

    if not Path(path).exists():
        print(f"‚ùå Arquivo n√£o encontrado: {path}")
        return

    print(f"\nüîÑ Processando: {path}")
    result = processor.process_single(path)

    if result.get('success'):
        print("\n‚úÖ Processamento conclu√≠do!")

        data = result.get('data', {})

        # Mostra valida√ß√£o NR-13
        if '_metadata' in data and 'validacao' in data['_metadata']:
            val = data['_metadata']['validacao']
            print(f"\nüìä Valida√ß√£o NR-13:")
            print(f"   ‚Ä¢ Completude: {val['completeness']:.1f}%")
            print(f"   ‚Ä¢ Campos obrigat√≥rios: {len(val['found'])}/{val['total_required']}")

            if val['missing']:
                print(f"   ‚Ä¢ Faltando: {', '.join(val['missing'])}")

        # Mostra campos principais
        print("\nüìã Campos extra√≠dos:")
        campos_mostrar = [
            'identificacao', 'tag', 'fabricante', 'categoria',
            'pressao_maxima_trabalho', 'ano_fabricacao'
        ]

        for campo in campos_mostrar:
            if campo in data and data[campo]:
                print(f"   ‚Ä¢ {campo}: {data[campo]}")

        # Mostra campos adicionais se existirem
        if 'outros_dados' in data and data['outros_dados']:
            print(f"\nüìå Campos adicionais: {len(data['outros_dados'])}")
            for key, value in list(data['outros_dados'].items())[:5]:
                print(f"   ‚Ä¢ {key}: {value}")
                
        # Mostra tempo de processamento
        if 'processing_time' in result:
            print(f"\n‚è±Ô∏è Tempo: {format_time(result['processing_time'])}")
            
    else:
        print(f"\n‚ùå Erro: {result.get('error', 'Desconhecido')}")


def validate_jsons():
    """Valida JSONs j√° processados"""
    json_files = list(settings.OUTPUT_JSON.glob("*_ocr.json"))

    if not json_files:
        print(f"\n‚ö†Ô∏è Nenhum JSON encontrado em {settings.OUTPUT_JSON}")
        return

    print(f"\nüìä Validando {len(json_files)} arquivos...")
    print("-"*60)

    stats = {'validos': 0, 'incompletos': 0, 'erros': 0}
    detailed_results = []

    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if '_metadata' in data and 'validacao' in data['_metadata']:
                val = data['_metadata']['validacao']
                
                result = {
                    'file': json_file.name,
                    'valid': val['valid'],
                    'completeness': val['completeness'],
                    'missing': val.get('missing', [])
                }
                
                if val['valid']:
                    print(f"‚úÖ {json_file.name}: {val['completeness']:.1f}% completo")
                    stats['validos'] += 1
                else:
                    missing = ', '.join(val['missing'])
                    print(f"‚ö†Ô∏è  {json_file.name}: Faltam: {missing}")
                    stats['incompletos'] += 1
                    
                detailed_results.append(result)
            else:
                # Tenta validar manualmente
                val = validate_nr13_result(data)
                
                result = {
                    'file': json_file.name,
                    'valid': val['valid'],
                    'completeness': val['completeness'],
                    'missing': val.get('missing', [])
                }
                
                if val['valid']:
                    print(f"‚úÖ {json_file.name}: V√°lido")
                    stats['validos'] += 1
                else:
                    print(f"‚ö†Ô∏è  {json_file.name}: Incompleto")
                    stats['incompletos'] += 1
                    
                detailed_results.append(result)

        except Exception as e:
            print(f"‚ùå {json_file.name}: Erro - {e}")
            stats['erros'] += 1

    print("-"*60)
    print(f"üìà Resumo: {stats['validos']} v√°lidos, {stats['incompletos']} incompletos, {stats['erros']} erros")
    
    # Mostra estat√≠sticas mais detalhadas
    if detailed_results:
        total_valid = len([r for r in detailed_results if r['valid']])
        avg_completeness = sum(r['completeness'] for r in detailed_results) / len(detailed_results)
        print(f"üìä Taxa de sucesso: {total_valid/len(detailed_results)*100:.1f}%")
        print(f"üìä Completude m√©dia: {avg_completeness:.1f}%")


def show_batch_history():
    """Mostra hist√≥rico de jobs batch"""
    batch_manager = BatchManager()
    jobs = batch_manager.list_jobs(limit=10)

    if not jobs:
        print("\n‚ö†Ô∏è Nenhum job batch encontrado")
        return

    print(f"\nüì¶ Hist√≥rico de Jobs Batch ({len(jobs)} jobs)")
    print("-"*60)

    # Ordena por data de cria√ß√£o (mais recente primeiro)
    sorted_jobs = sorted(jobs.items(),
                        key=lambda x: x[1].get('created_at', ''),
                        reverse=True)

    for job_id, info in sorted_jobs:
        print(f"\nüîπ Job: {job_id[:12]}...")
        print(f"   Status: {info.get('status', 'desconhecido')}")
        print(f"   Criado: {info.get('created_at', 'N/A')}")
        print(f"   Imagens: {info.get('total_images', 'N/A')}")

        if 'results_count' in info:
            print(f"   Resultados: {info['results_count']}")
            
        if info.get('status') == 'completed':
            print(f"   ‚úÖ Conclu√≠do")
        elif info.get('status') == 'failed':
            print(f"   ‚ùå Falhou")
        elif info.get('status') in ['created', 'running']:
            print(f"   ‚è≥ Em andamento")


def show_reports():
    """Mostra relat√≥rios dispon√≠veis"""
    reports = list(settings.OUTPUT_REPORTS.glob("resumo_*.json"))

    if not reports:
        print("\n‚ö†Ô∏è Nenhum relat√≥rio encontrado")
        return

    print(f"\nüìä √öltimos Relat√≥rios")
    print("-"*60)

    # Ordena por data (mais recente primeiro)
    reports_sorted = sorted(reports, key=lambda x: x.stat().st_mtime, reverse=True)

    for report in reports_sorted[:10]:
        try:
            with open(report, 'r', encoding='utf-8') as f:
                data = json.load(f)

            timestamp = data.get('timestamp', 'N/A')
            total = data.get('total_imagens', 0)
            sucesso = data.get('sucesso', 0)
            taxa = data.get('taxa_sucesso', 0)
            modo = data.get('modo', 'N/A')
            tempo = data.get('tempo_total')

            print(f"\nüìÑ {report.name}")
            print(f"   Data: {timestamp[:19] if timestamp != 'N/A' else 'N/A'}")
            print(f"   Total: {total} | Sucesso: {sucesso} | Taxa: {taxa:.1f}%")
            print(f"   Modo: {modo.upper() if modo != 'N/A' else 'N/A'}")
            
            if tempo:
                print(f"   Tempo: {format_time(tempo)}")

        except Exception as e:
            print(f"\nüìÑ {report.name} (erro ao ler: {e})")


def show_settings():
    """Mostra configura√ß√µes atuais"""
    print("\n‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS")
    print("-"*60)

    print("\nüîß Processamento:")
    print(f"   ‚Ä¢ Modelo: {settings.MISTRAL_MODEL}")
    print(f"   ‚Ä¢ Threshold Batch: {settings.BATCH_THRESHOLD} imagens")
    print(f"   ‚Ä¢ Tamanho M√°x Batch: {settings.MAX_BATCH_SIZE}")
    print(f"   ‚Ä¢ Timeout: {format_time(settings.MAX_WAIT_TIME)}")
    print(f"   ‚Ä¢ Similaridade: {settings.SIMILARITY_THRESHOLD * 100:.0f}%")
    print(f"   ‚Ä¢ Temperature: {settings.TEMPERATURE}")
    print(f"   ‚Ä¢ Max Tokens: {settings.MAX_TOKENS}")

    print("\nüìÅ Diret√≥rios:")
    print(f"   ‚Ä¢ Input: {settings.INPUT_DIR}")
    print(f"   ‚Ä¢ Output JSON: {settings.OUTPUT_JSON}")
    print(f"   ‚Ä¢ Output Batch: {settings.OUTPUT_BATCH}")
    print(f"   ‚Ä¢ Logs: {settings.LOGS_DIR}")

    print("\nüìÑ Formatos suportados:")
    print(f"   {', '.join(settings.SUPPORTED_FORMATS)}")

    print("\n‚úÖ Campos obrigat√≥rios NR-13:")
    for field in settings.REQUIRED_FIELDS:
        print(f"   ‚Ä¢ {field}")
        
    # Mostra info do ambiente
    env_info = settings.get_env_info()
    print("\nüåç Ambiente:")
    print(f"   ‚Ä¢ API Key configurada: {'‚úÖ' if env_info['api_key_configured'] else '‚ùå'}")
    print(f"   ‚Ä¢ Diret√≥rios existem: {'‚úÖ' if env_info['directories_exist'] else '‚ùå'}")


def test_connection(processor: OCRProcessor):
    """Testa conex√£o com a API"""
    print("\nüîç Testando conex√£o com Mistral AI...")
    
    try:
        if processor.test_api_connection():
            print("‚úÖ Conex√£o com API estabelecida com sucesso!")
            print(f"   ‚Ä¢ Modelo: {settings.MISTRAL_MODEL}")
            print(f"   ‚Ä¢ Endpoint: https://api.mistral.ai")
        else:
            print("‚ùå Falha na conex√£o com a API")
            print("   ‚Ä¢ Verifique sua MISTRAL_API_KEY")
            print("   ‚Ä¢ Verifique sua conex√£o com internet")
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")


def show_statistics(processor: OCRProcessor):
    """Mostra estat√≠sticas do sistema"""
    print("\nüìà ESTAT√çSTICAS DO SISTEMA")
    print("-"*60)
    
    try:
        stats = processor.get_stats()
        
        print("\nüîß Processador:")
        print(f"   ‚Ä¢ Imagens processadas: {stats['processed_count']}")
        print(f"   ‚Ä¢ Erros: {stats['error_count']}")
        print(f"   ‚Ä¢ Taxa de sucesso: {stats['success_rate']:.1f}%")
        
        print("\nüóÇÔ∏è  Normalizador:")
        norm_stats = stats['normalizer_stats']
        print(f"   ‚Ä¢ Mapeamentos predefinidos: {norm_stats['total_predefined']}")
        print(f"   ‚Ä¢ Mapeamentos aprendidos: {norm_stats['total_learned']}")
        print(f"   ‚Ä¢ Threshold similaridade: {norm_stats['threshold']*100:.0f}%")
        
        if norm_stats['learned_fields']:
            print(f"   ‚Ä¢ Campos aprendidos: {', '.join(norm_stats['learned_fields'][:5])}")
        
        print("\nüì¶ Batch Manager:")
        batch_stats = stats['batch_stats']
        print(f"   ‚Ä¢ Total jobs: {batch_stats['total_jobs']}")
        
        if batch_stats['status_breakdown']:
            print("   ‚Ä¢ Status breakdown:")
            for status, count in batch_stats['status_breakdown'].items():
                print(f"     - {status}: {count}")
        
        # Estat√≠sticas de arquivos
        print("\nüìÅ Arquivos:")
        json_files = list(settings.OUTPUT_JSON.glob("*_ocr.json"))
        batch_files = list(settings.OUTPUT_BATCH.glob("*.jsonl"))
        reports = list(settings.OUTPUT_REPORTS.glob("*.json"))
        
        print(f"   ‚Ä¢ JSONs processados: {len(json_files)}")
        print(f"   ‚Ä¢ Arquivos batch: {len(batch_files)}")
        print(f"   ‚Ä¢ Relat√≥rios: {len(reports)}")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")


def main():
    """Fun√ß√£o principal"""
    try:
        # Valida configura√ß√µes
        settings.validate()
        logger.info("Sistema NR13 OCR iniciado")

        # Inicializa processador
        processor = OCRProcessor()

        while True:
            print_banner()
            print_menu()

            choice = input("\nEscolha uma op√ß√£o (1-9): ").strip()

            if choice == "1":
                process_images(processor)
                input("\nPressione Enter para continuar...")

            elif choice == "2":
                process_single_image(processor)
                input("\nPressione Enter para continuar...")

            elif choice == "3":
                validate_jsons()
                input("\nPressione Enter para continuar...")

            elif choice == "4":
                show_batch_history()
                input("\nPressione Enter para continuar...")

            elif choice == "5":
                show_reports()
                input("\nPressione Enter para continuar...")

            elif choice == "6":
                show_settings()
                input("\nPressione Enter para continuar...")
                
            elif choice == "7":
                test_connection(processor)
                input("\nPressione Enter para continuar...")
                
            elif choice == "8":
                show_statistics(processor)
                input("\nPressione Enter para continuar...")

            elif choice == "9":
                if ask_confirmation("Deseja realmente sair?"):
                    print("\nüëã Encerrando sistema...")
                    break

            else:
                print("\n‚ö†Ô∏è Op√ß√£o inv√°lida!")
                input("\nPressione Enter para continuar...")

    except KeyboardInterrupt:
        print("\n\nüëã Sistema interrompido pelo usu√°rio")
        logger.info("Sistema interrompido pelo usu√°rio")

    except ValueError as e:
        logger.error(f"Erro de configura√ß√£o: {e}")
        print(f"\n‚ùå Erro de configura√ß√£o: {e}")
        print("Verifique o arquivo .env")
        
        # Mostra informa√ß√µes de debug
        print("\nüîç Informa√ß√µes de debug:")
        try:
            sys_info = get_system_info()
            print(f"   ‚Ä¢ Python: {sys_info['python_version'].split()[0]}")
            print(f"   ‚Ä¢ Diret√≥rio: {sys_info['working_directory']}")
            print(f"   ‚Ä¢ Configura√ß√µes: {sys_info['settings_valid']}")
        except:
            pass
            
        sys.exit(1)

    except Exception as e:
        logger.error(f"Erro fatal: {e}", exc_info=True)
        print(f"\n‚ùå Erro fatal: {e}")
        print("Verifique o arquivo de log para mais detalhes")
        sys.exit(1)


if __name__ == "__main__":
    main()
