#!/usr/bin/env python3\n\"\"\"\nSistema OCR para Placas NR-13\nEntry point principal\n\"\"\"\nimport sys\nimport json\nimport os\nfrom pathlib import Path\n\n# Adiciona diret√≥rio raiz ao path para imports\nproject_root = Path(__file__).parent.absolute()\nsys.path.insert(0, str(project_root))\n\n# Agora importa os m√≥dulos do projeto\ntry:\n    from config.settings import settings\n    from ocr.processor import OCRProcessor\n    from ocr.models import PlacaNR13\n    from services import BatchManager\n    from utils import (\n        get_logger, print_banner, print_summary, ask_confirmation,\n        validate_nr13_result, format_time, get_system_info\n    )\nexcept ImportError as e:\n    print(f\"‚ùå Erro ao importar m√≥dulos: {e}\")\n    print(\"\\nüîß Solu√ß√µes poss√≠veis:\")\n    print(\"1. Verifique se est√° no diret√≥rio correto do projeto\")\n    print(\"2. Execute: pip install -r requirements.txt\")\n    print(\"3. Ative o ambiente virtual se estiver usando\")\n    print(\"4. Verifique se todos os arquivos .py est√£o presentes\")\n    print(f\"5. Diret√≥rio atual: {Path.cwd()}\")\n    print(f\"6. Diret√≥rio do projeto: {Path(__file__).parent.absolute()}\")\n    sys.exit(1)\n\nlogger = get_logger(__name__)\n\n\ndef print_menu():\n    \"\"\"Imprime menu principal\"\"\"\n    print(f\"\\nüìä Modo H√≠brido Inteligente:\")\n    print(f\"   ‚Ä¢ 1-{settings.BATCH_THRESHOLD}: Processamento S√≠ncrono\")\n    print(f\"   ‚Ä¢ >{settings.BATCH_THRESHOLD}: Batch API (50% desconto)\")\n    print(\"\\n\" + \"-\"*60)\n    print(\"\\n1. Processar imagens (autom√°tico)\")\n    print(\"2. Processar imagem espec√≠fica\")\n    print(\"3. Validar JSONs processados\")\n    print(\"4. Ver hist√≥rico de jobs batch\")\n    print(\"5. Ver relat√≥rios\")\n    print(\"6. Configura√ß√µes\")\n    print(\"7. Teste de conex√£o\")\n    print(\"8. Estat√≠sticas\")\n    print(\"9. Sair\")\n    print(\"-\"*60)\n\n\ndef check_project_structure():\n    \"\"\"Verifica se a estrutura do projeto est√° correta\"\"\"\n    required_files = [\n        'config/settings.py',\n        'config/field_mappings.yaml',\n        'ocr/processor.py',\n        'ocr/models.py',\n        'ocr/normalizer.py',\n        'services.py',\n        'utils.py',\n        'requirements.txt'\n    ]\n    \n    missing_files = []\n    for file_path in required_files:\n        if not (project_root / file_path).exists():\n            missing_files.append(file_path)\n    \n    if missing_files:\n        print(\"‚ùå Arquivos obrigat√≥rios n√£o encontrados:\")\n        for file_path in missing_files:\n            print(f\"   ‚Ä¢ {file_path}\")\n        print(\"\\nüîß Certifique-se de que todos os arquivos do projeto est√£o presentes.\")\n        return False\n    \n    return True\n\n\ndef process_images(processor: OCRProcessor):\n    \"\"\"Processa imagens no diret√≥rio de entrada\"\"\"\n    print(\"\\nüîÑ Processando imagens...\")\n\n    # Verifica se h√° imagens\n    images = processor.files.list_images(settings.INPUT_DIR)\n    if not images:\n        print(f\"\\n‚ö†Ô∏è Nenhuma imagem encontrada em {settings.INPUT_DIR}\")\n        print(f\"Coloque as imagens das placas na pasta '{settings.INPUT_DIR}' e tente novamente.\")\n        print(f\"Formatos suportados: {', '.join(settings.SUPPORTED_FORMATS)}\")\n        return\n\n    summary = processor.process()\n\n    if 'error' in summary:\n        print(f\"\\n‚ùå {summary.get('message', 'Erro no processamento')}\")\n    else:\n        print_summary(summary)\n\n        if summary.get('sucesso', 0) > 0:\n            print(f\"\\n‚úÖ Resultados salvos em: {settings.OUTPUT_JSON}\")\n            \n            # Mostra alguns resultados\n            show_recent_results()\n\n\ndef show_recent_results(limit: int = 3):\n    \"\"\"Mostra resultados recentes\"\"\"\n    try:\n        json_files = sorted(settings.OUTPUT_JSON.glob(\"*_ocr.json\"), \n                           key=lambda x: x.stat().st_mtime, reverse=True)\n        \n        if json_files:\n            print(f\"\\nüìã √öltimos {min(limit, len(json_files))} resultados:\")\n            print(\"-\" * 40)\n            \n            for json_file in json_files[:limit]:\n                try:\n                    with open(json_file, 'r', encoding='utf-8') as f:\n                        data = json.load(f)\n                    \n                    print(f\"\\nüìÑ {json_file.name}:\")\n                    \n                    # Mostra campos principais\n                    main_fields = ['identificacao', 'fabricante', 'categoria', 'pressao_maxima_trabalho']\n                    for field in main_fields:\n                        if field in data and data[field]:\n                            print(f\"  ‚Ä¢ {field}: {data[field]}\")\n                    \n                    # Mostra valida√ß√£o se dispon√≠vel\n                    if '_metadata' in data and 'validacao' in data['_metadata']:\n                        val = data['_metadata']['validacao']\n                        status = \"‚úÖ\" if val.get('valid') else \"‚ö†Ô∏è\"\n                        print(f\"  {status} Completude: {val.get('completeness', 0):.1f}%\")\n                        \n                except Exception as e:\n                    print(f\"  ‚ùå Erro ao ler {json_file.name}: {e}\")\n    except Exception as e:\n        print(f\"‚ùå Erro ao listar resultados: {e}\")\n\n\ndef process_single_image(processor: OCRProcessor):\n    \"\"\"Processa uma imagem espec√≠fica\"\"\"\n    path = input(\"\\nCaminho da imagem: \").strip()\n\n    if not path:\n        print(\"‚ùå Caminho inv√°lido\")\n        return\n\n    if not Path(path).exists():\n        print(f\"‚ùå Arquivo n√£o encontrado: {path}\")\n        return\n\n    print(f\"\\nüîÑ Processando: {path}\")\n    result = processor.process_single(path)\n\n    if result.get('success'):\n        print(\"\\n‚úÖ Processamento conclu√≠do!\")\n\n        data = result.get('data', {})\n\n        # Mostra valida√ß√£o NR-13\n        if '_metadata' in data and 'validacao' in data['_metadata']:\n            val = data['_metadata']['validacao']\n            print(f\"\\nüìä Valida√ß√£o NR-13:\")\n            print(f\"   ‚Ä¢ Completude: {val['completeness']:.1f}%\")\n            print(f\"   ‚Ä¢ Campos obrigat√≥rios: {len(val['found'])}/{val['total_required']}\")\n\n            if val['missing']:\n                print(f\"   ‚Ä¢ Faltando: {', '.join(val['missing'])}\")\n\n        # Mostra campos principais\n        print(\"\\nüìã Campos extra√≠dos:\")\n        campos_mostrar = [\n            'identificacao', 'tag', 'fabricante', 'categoria',\n            'pressao_maxima_trabalho', 'ano_fabricacao'\n        ]\n\n        for campo in campos_mostrar:\n            if campo in data and data[campo]:\n                print(f\"   ‚Ä¢ {campo}: {data[campo]}\")\n\n        # Mostra campos adicionais se existirem\n        if 'outros_dados' in data and data['outros_dados']:\n            print(f\"\\nüìå Campos adicionais: {len(data['outros_dados'])}\")\n            for key, value in list(data['outros_dados'].items())[:5]:\n                print(f\"   ‚Ä¢ {key}: {value}\")\n                \n        # Mostra tempo de processamento\n        if 'processing_time' in result:\n            print(f\"\\n‚è±Ô∏è Tempo: {format_time(result['processing_time'])}\")\n            \n    else:\n        print(f\"\\n‚ùå Erro: {result.get('error', 'Desconhecido')}\")\n\n\ndef validate_jsons():\n    \"\"\"Valida JSONs j√° processados\"\"\"\n    try:\n        json_files = list(settings.OUTPUT_JSON.glob(\"*_ocr.json\"))\n\n        if not json_files:\n            print(f\"\\n‚ö†Ô∏è Nenhum JSON encontrado em {settings.OUTPUT_JSON}\")\n            return\n\n        print(f\"\\nüìä Validando {len(json_files)} arquivos...\")\n        print(\"-\"*60)\n\n        stats = {'validos': 0, 'incompletos': 0, 'erros': 0}\n        detailed_results = []\n\n        for json_file in json_files:\n            try:\n                with open(json_file, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n\n                if '_metadata' in data and 'validacao' in data['_metadata']:\n                    val = data['_metadata']['validacao']\n                    \n                    result = {\n                        'file': json_file.name,\n                        'valid': val['valid'],\n                        'completeness': val['completeness'],\n                        'missing': val.get('missing', [])\n                    }\n                    \n                    if val['valid']:\n                        print(f\"‚úÖ {json_file.name}: {val['completeness']:.1f}% completo\")\n                        stats['validos'] += 1\n                    else:\n                        missing = ', '.join(val['missing'])\n                        print(f\"‚ö†Ô∏è  {json_file.name}: Faltam: {missing}\")\n                        stats['incompletos'] += 1\n                        \n                    detailed_results.append(result)\n                else:\n                    # Tenta validar manualmente\n                    val = validate_nr13_result(data)\n                    \n                    result = {\n                        'file': json_file.name,\n                        'valid': val['valid'],\n                        'completeness': val['completeness'],\n                        'missing': val.get('missing', [])\n                    }\n                    \n                    if val['valid']:\n                        print(f\"‚úÖ {json_file.name}: V√°lido\")\n                        stats['validos'] += 1\n                    else:\n                        print(f\"‚ö†Ô∏è  {json_file.name}: Incompleto\")\n                        stats['incompletos'] += 1\n                        \n                    detailed_results.append(result)\n\n            except Exception as e:\n                print(f\"‚ùå {json_file.name}: Erro - {e}\")\n                stats['erros'] += 1\n\n        print(\"-\"*60)\n        print(f\"üìà Resumo: {stats['validos']} v√°lidos, {stats['incompletos']} incompletos, {stats['erros']} erros\")\n        \n        # Mostra estat√≠sticas mais detalhadas\n        if detailed_results:\n            total_valid = len([r for r in detailed_results if r['valid']])\n            avg_completeness = sum(r['completeness'] for r in detailed_results) / len(detailed_results)\n            print(f\"üìä Taxa de sucesso: {total_valid/len(detailed_results)*100:.1f}%\")\n            print(f\"üìä Completude m√©dia: {avg_completeness:.1f}%\")\n    except Exception as e:\n        print(f\"‚ùå Erro na valida√ß√£o: {e}\")\n\n\ndef show_batch_history():\n    \"\"\"Mostra hist√≥rico de jobs batch\"\"\"\n    try:\n        batch_manager = BatchManager()\n        jobs = batch_manager.list_jobs(limit=10)\n\n        if not jobs:\n            print(\"\\n‚ö†Ô∏è Nenhum job batch encontrado\")\n            return\n\n        print(f\"\\nüì¶ Hist√≥rico de Jobs Batch ({len(jobs)} jobs)\")\n        print(\"-\"*60)\n\n        # Ordena por data de cria√ß√£o (mais recente primeiro)\n        sorted_jobs = sorted(jobs.items(),\n                            key=lambda x: x[1].get('created_at', ''),\n                            reverse=True)\n\n        for job_id, info in sorted_jobs:\n            print(f\"\\nüîπ Job: {job_id[:12]}...\")\n            print(f\"   Status: {info.get('status', 'desconhecido')}\")\n            print(f\"   Criado: {info.get('created_at', 'N/A')}\")\n            print(f\"   Imagens: {info.get('total_images', 'N/A')}\")\n\n            if 'results_count' in info:\n                print(f\"   Resultados: {info['results_count']}\")\n                \n            if info.get('status') == 'completed':\n                print(f\"   ‚úÖ Conclu√≠do\")\n            elif info.get('status') == 'failed':\n                print(f\"   ‚ùå Falhou\")\n            elif info.get('status') in ['created', 'running']:\n                print(f\"   ‚è≥ Em andamento\")\n    except Exception as e:\n        print(f\"‚ùå Erro ao carregar hist√≥rico: {e}\")\n\n\ndef show_reports():\n    \"\"\"Mostra relat√≥rios dispon√≠veis\"\"\"\n    try:\n        reports = list(settings.OUTPUT_REPORTS.glob(\"resumo_*.json\"))\n\n        if not reports:\n            print(\"\\n‚ö†Ô∏è Nenhum relat√≥rio encontrado\")\n            return\n\n        print(f\"\\nüìä √öltimos Relat√≥rios\")\n        print(\"-\"*60)\n\n        # Ordena por data (mais recente primeiro)\n        reports_sorted = sorted(reports, key=lambda x: x.stat().st_mtime, reverse=True)\n\n        for report in reports_sorted[:10]:\n            try:\n                with open(report, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n\n                timestamp = data.get('timestamp', 'N/A')\n                total = data.get('total_imagens', 0)\n                sucesso = data.get('sucesso', 0)\n                taxa = data.get('taxa_sucesso', 0)\n                modo = data.get('modo', 'N/A')\n                tempo = data.get('tempo_total')\n\n                print(f\"\\nüìÑ {report.name}\")\n                print(f\"   Data: {timestamp[:19] if timestamp != 'N/A' else 'N/A'}\")\n                print(f\"   Total: {total} | Sucesso: {sucesso} | Taxa: {taxa:.1f}%\")\n                print(f\"   Modo: {modo.upper() if modo != 'N/A' else 'N/A'}\")\n                \n                if tempo:\n                    print(f\"   Tempo: {format_time(tempo)}\")\n\n            except Exception as e:\n                print(f\"\\nüìÑ {report.name} (erro ao ler: {e})\")\n    except Exception as e:\n        print(f\"‚ùå Erro ao carregar relat√≥rios: {e}\")\n\n\ndef show_settings():\n    \"\"\"Mostra configura√ß√µes atuais\"\"\"\n    print(\"\\n‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS\")\n    print(\"-\"*60)\n\n    print(\"\\nüîß Processamento:\")\n    print(f\"   ‚Ä¢ Modelo: {settings.MISTRAL_MODEL}\")\n    print(f\"   ‚Ä¢ Threshold Batch: {settings.BATCH_THRESHOLD} imagens\")\n    print(f\"   ‚Ä¢ Tamanho M√°x Batch: {settings.MAX_BATCH_SIZE}\")\n    print(f\"   ‚Ä¢ Timeout: {format_time(settings.MAX_WAIT_TIME)}\")\n    print(f\"   ‚Ä¢ Similaridade: {settings.SIMILARITY_THRESHOLD * 100:.0f}%\")\n    print(f\"   ‚Ä¢ Temperature: {settings.TEMPERATURE}\")\n    print(f\"   ‚Ä¢ Max Tokens: {settings.MAX_TOKENS}\")\n\n    print(\"\\nüìÅ Diret√≥rios:\")\n    print(f\"   ‚Ä¢ Input: {settings.INPUT_DIR}\")\n    print(f\"   ‚Ä¢ Output JSON: {settings.OUTPUT_JSON}\")\n    print(f\"   ‚Ä¢ Output Batch: {settings.OUTPUT_BATCH}\")\n    print(f\"   ‚Ä¢ Logs: {settings.LOGS_DIR}\")\n\n    print(\"\\nüìÑ Formatos suportados:\")\n    print(f\"   {', '.join(settings.SUPPORTED_FORMATS)}\")\n\n    print(\"\\n‚úÖ Campos obrigat√≥rios NR-13:\")\n    for field in settings.REQUIRED_FIELDS:\n        print(f\"   ‚Ä¢ {field}\")\n        \n    # Mostra info do ambiente\n    try:\n        env_info = settings.get_env_info()\n        print(\"\\nüåç Ambiente:\")\n        print(f\"   ‚Ä¢ API Key configurada: {'‚úÖ' if env_info['api_key_configured'] else '‚ùå'}\")\n        print(f\"   ‚Ä¢ Diret√≥rios existem: {'‚úÖ' if env_info['directories_exist'] else '‚ùå'}\")\n    except Exception as e:\n        print(f\"\\n‚ùå Erro ao verificar ambiente: {e}\")\n\n\ndef test_connection(processor: OCRProcessor):\n    \"\"\"Testa conex√£o com a API\"\"\"\n    print(\"\\nüîç Testando conex√£o com Mistral AI...\")\n    \n    try:\n        if processor.test_api_connection():\n            print(\"‚úÖ Conex√£o com API estabelecida com sucesso!\")\n            print(f\"   ‚Ä¢ Modelo: {settings.MISTRAL_MODEL}\")\n            print(f\"   ‚Ä¢ Endpoint: https://api.mistral.ai\")\n        else:\n            print(\"‚ùå Falha na conex√£o com a API\")\n            print(\"   ‚Ä¢ Verifique sua MISTRAL_API_KEY\")\n            print(\"   ‚Ä¢ Verifique sua conex√£o com internet\")\n    except Exception as e:\n        print(f\"‚ùå Erro no teste: {e}\")\n\n\ndef show_statistics(processor: OCRProcessor):\n    \"\"\"Mostra estat√≠sticas do sistema\"\"\"\n    print(\"\\nüìà ESTAT√çSTICAS DO SISTEMA\")\n    print(\"-\"*60)\n    \n    try:\n        stats = processor.get_stats()\n        \n        print(\"\\nüîß Processador:\")\n        print(f\"   ‚Ä¢ Imagens processadas: {stats['processed_count']}\")\n        print(f\"   ‚Ä¢ Erros: {stats['error_count']}\")\n        print(f\"   ‚Ä¢ Taxa de sucesso: {stats['success_rate']:.1f}%\")\n        \n        print(\"\\nüóÇÔ∏è  Normalizador:\")\n        norm_stats = stats['normalizer_stats']\n        print(f\"   ‚Ä¢ Mapeamentos predefinidos: {norm_stats['total_predefined']}\")\n        print(f\"   ‚Ä¢ Mapeamentos aprendidos: {norm_stats['total_learned']}\")\n        print(f\"   ‚Ä¢ Threshold similaridade: {norm_stats['threshold']*100:.0f}%\")\n        \n        if norm_stats['learned_fields']:\n            print(f\"   ‚Ä¢ Campos aprendidos: {', '.join(norm_stats['learned_fields'][:5])}\")\n        \n        print(\"\\nüì¶ Batch Manager:\")\n        batch_stats = stats['batch_stats']\n        print(f\"   ‚Ä¢ Total jobs: {batch_stats['total_jobs']}\")\n        \n        if batch_stats['status_breakdown']:\n            print(\"   ‚Ä¢ Status breakdown:\")\n            for status, count in batch_stats['status_breakdown'].items():\n                print(f\"     - {status}: {count}\")\n        \n        # Estat√≠sticas de arquivos\n        print(\"\\nüìÅ Arquivos:\")\n        json_files = list(settings.OUTPUT_JSON.glob(\"*_ocr.json\"))\n        batch_files = list(settings.OUTPUT_BATCH.glob(\"*.jsonl\"))\n        reports = list(settings.OUTPUT_REPORTS.glob(\"*.json\"))\n        \n        print(f\"   ‚Ä¢ JSONs processados: {len(json_files)}\")\n        print(f\"   ‚Ä¢ Arquivos batch: {len(batch_files)}\")\n        print(f\"   ‚Ä¢ Relat√≥rios: {len(reports)}\")\n        \n    except Exception as e:\n        print(f\"‚ùå Erro ao obter estat√≠sticas: {e}\")\n\n\ndef main():\n    \"\"\"Fun√ß√£o principal\"\"\"\n    try:\n        # Verifica√ß√µes iniciais\n        print(\"üîç Verificando estrutura do projeto...\")\n        if not check_project_structure():\n            sys.exit(1)\n        \n        print(\"‚úÖ Estrutura do projeto OK\")\n        \n        # Valida configura√ß√µes\n        print(\"üîç Validando configura√ß√µes...\")\n        settings.validate()\n        print(\"‚úÖ Configura√ß√µes OK\")\n        \n        logger.info(\"Sistema NR13 OCR iniciado\")\n\n        # Inicializa processador\n        print(\"üîç Inicializando processador OCR...\")\n        processor = OCRProcessor()\n        print(\"‚úÖ Processador inicializado\")\n\n        while True:\n            print_banner()\n            print_menu()\n\n            choice = input(\"\\nEscolha uma op√ß√£o (1-9): \").strip()\n\n            if choice == \"1\":\n                process_images(processor)\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"2\":\n                process_single_image(processor)\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"3\":\n                validate_jsons()\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"4\":\n                show_batch_history()\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"5\":\n                show_reports()\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"6\":\n                show_settings()\n                input(\"\\nPressione Enter para continuar...\")\n                \n            elif choice == \"7\":\n                test_connection(processor)\n                input(\"\\nPressione Enter para continuar...\")\n                \n            elif choice == \"8\":\n                show_statistics(processor)\n                input(\"\\nPressione Enter para continuar...\")\n\n            elif choice == \"9\":\n                if ask_confirmation(\"Deseja realmente sair?\"):\n                    print(\"\\nüëã Encerrando sistema...\")\n                    break\n\n            else:\n                print(\"\\n‚ö†Ô∏è Op√ß√£o inv√°lida!\")\n                input(\"\\nPressione Enter para continuar...\")\n\n    except KeyboardInterrupt:\n        print(\"\\n\\nüëã Sistema interrompido pelo usu√°rio\")\n        logger.info(\"Sistema interrompido pelo usu√°rio\")\n\n    except ValueError as e:\n        logger.error(f\"Erro de configura√ß√£o: {e}\")\n        print(f\"\\n‚ùå Erro de configura√ß√£o: {e}\")\n        print(\"\\nüîß Solu√ß√µes:\")\n        print(\"1. Verifique o arquivo .env\")\n        print(\"2. Configure sua MISTRAL_API_KEY\")\n        print(\"3. Execute: cp .env.example .env\")\n        \n        # Mostra informa√ß√µes de debug\n        print(\"\\nüîç Informa√ß√µes de debug:\")\n        try:\n            sys_info = get_system_info()\n            print(f\"   ‚Ä¢ Python: {sys_info['python_version'].split()[0]}\")\n            print(f\"   ‚Ä¢ Diret√≥rio: {sys_info['working_directory']}\")\n            print(f\"   ‚Ä¢ Projeto: {project_root}\")\n        except Exception:\n            print(f\"   ‚Ä¢ Diret√≥rio do projeto: {project_root}\")\n            print(f\"   ‚Ä¢ Python: {sys.version.split()[0]}\")\n            \n        sys.exit(1)\n\n    except Exception as e:\n        logger.error(f\"Erro fatal: {e}\", exc_info=True)\n        print(f\"\\n‚ùå Erro fatal: {e}\")\n        print(\"\\nüîß Solu√ß√µes:\")\n        print(\"1. Verifique o arquivo de log para mais detalhes\")\n        print(\"2. Reinstale as depend√™ncias: pip install -r requirements.txt\")\n        print(\"3. Verifique se todos os arquivos est√£o presentes\")\n        print(f\"4. Verifique se est√° no diret√≥rio correto: {project_root}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n